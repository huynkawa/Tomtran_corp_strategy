# src/ui_streamlit_layout.py
# -*- coding: utf-8 -*-
"""
UI Chat ki·ªÉu ChatGPT ‚Äî full screen, sidebar tr√°i, khung chat c√≥ vi·ªÅn, input d√≠nh ƒë√°y
"""

import os
import streamlit as st
from io import BytesIO
from docx import Document
from PyPDF2 import PdfReader
from src.chat_saver import save_chat

# --- Footer t·ª´ YAML (robust, kh√¥ng b·ªã d∆∞ </p>) ---
import yaml
from pathlib import Path

def _load_theme_yaml(path="configs/ui_streamlit_theme.yaml"):
    p = Path(path)
    if not p.exists():
        return {}
    try:
        return yaml.safe_load(p.read_text(encoding="utf-8")) or {}
    except Exception:
        return {}

_cfg = _load_theme_yaml()
_ft  = (_cfg.get("FOOTER") or {})

if _ft.get("ENABLED", True):
    text_html  = (_ft.get("TEXT_HTML") or "").strip()
    align      = _ft.get("ALIGN", "center")
    color      = _ft.get("COLOR", "#6B7280")
    size_rem   = _ft.get("SIZE_REM", 0.9)
    show_hr_t  = _ft.get("SHOW_HR_TOP", True)
    show_hr_b  = _ft.get("SHOW_HR_BOTTOM", False)
    hr_color   = _ft.get("HR_COLOR", "#E5E7EB")
    hr_thick   = int(_ft.get("HR_THICK_PX", 1))
    mt         = _ft.get("MARGIN_TOP_REM", 0.6)
    mb         = _ft.get("MARGIN_BOTTOM_REM", 0.0)

    hr_top = f"<hr style='border:0;border-top:{hr_thick}px solid {hr_color};margin:.4rem 0;'/>" if show_hr_t else ""
    hr_bot = f"<hr style='border:0;border-top:{hr_thick}px solid {hr_color};margin:.4rem 0;'/>" if show_hr_b else ""

    if text_html.startswith("<"):
        body = (
            f'<div style="text-align:{align}; color:{color}; '
            f'font-size:{size_rem}rem; margin:{mt}rem 0 {mb}rem;">{text_html}</div>'
        )
    else:
        body = (
            f'<p style="text-align:{align}; color:{color}; '
            f'font-size:{size_rem}rem; margin:{mt}rem 0 {mb}rem;">{text_html}</p>'
        )

    st.markdown(f"{hr_top}{body}{hr_bot}", unsafe_allow_html=True)


# --- ƒë·ªçc n·ªôi dung file (txt/pdf/docx) ---
def read_text_from_file(uploaded_file):
    try:
        if uploaded_file.name.endswith(".txt"):
            return uploaded_file.read().decode("utf-8", errors="ignore")
        elif uploaded_file.name.endswith(".pdf"):
            reader = PdfReader(uploaded_file)
            text = ""
            for page in reader.pages[:3]:
                text += page.extract_text() + "\n"
            return text or "[Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c n·ªôi dung PDF]"
        elif uploaded_file.name.endswith(".docx"):
            doc = Document(uploaded_file)
            text = "\n".join([p.text for p in doc.paragraphs[:30]])
            return text or "[Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c n·ªôi dung DOCX]"
        else:
            return "[ƒê·ªãnh d·∫°ng kh√¥ng h·ªó tr·ª£]"
    except Exception as e:
        return f"[L·ªói ƒë·ªçc file: {e}]"


def render_ui(title="TomTran Strategy AI"):
    # 1) Page config ph·∫£i ƒë·∫∑t TR∆Ø·ªöC m·ªçi st.* kh√°c
    st.set_page_config(page_title=title, page_icon="üí¨", layout="wide")

    from src.ui_streamlit_theme_old import load_theme
    # ƒê·ªåC THEME T·ª™ YAML + KHAI B√ÅO BI·∫æN D√ôNG CHO CSS
    theme = load_theme()
    input_text = getattr(theme, "INPUT_TEXT", "#111827")
    input_txt = input_text
    # K√≠ch th∆∞·ªõc khung chat
    main_max   = getattr(theme, "CHAT_WIDTH_DESKTOP_PX", 820)
    tablet_max = getattr(theme, "CHAT_WIDTH_TABLET_PX", 680)
    mobile_pct = getattr(theme, "CHAT_WIDTH_MOBILE_PCT", 96)

    # √î nh·∫≠p (m√†u/vi·ªÅn/chi·ªÅu cao)
    input_bg   = getattr(theme, "INPUT_BG", "#E5F1FF")
    input_text = getattr(theme, "INPUT_TEXT", "#111827")        # <-- c√°i b·∫°n ƒëang thi·∫øu
    input_brd  = getattr(theme, "INPUT_BORDER_DARK", "#BFD9FF")
    input_h    = getattr(theme, "INPUT_MIN_HEIGHT_PX", 100)

    # Hint/ti√™u ƒë·ªÅ
    prompt_col = getattr(theme, "PROMPT_TEXT", "#111827")       # <-- c√°i b·∫°n ƒëang thi·∫øu
    prompt_sz  = getattr(theme, "PROMPT_FONT_SIZE_REM", 1.0)    # <-- c√°i b·∫°n ƒëang thi·∫øu
    title_sz   = getattr(theme, "TITLE_FONT_SIZE_REM", 1.8)     # <-- c√°i b·∫°n ƒëang thi·∫øu

    # CSS ‚Äúchat input‚Äù
    # ==== CSS for chat input (always visible) ====
    st.markdown(
        f"""
    <style>
    :root{{
        --main-max: {main_max}px;
        --blue-100: {input_bg};
        --blue-300: {input_brd};
    }}

    /* Chat history container */
    .chat-container{{
        width: 80%;
        max-width: var(--main-max);
        margin: 0 auto 8px auto !important;
        background: transparent !important;
        border: none !important;
        border-radius: 12px !important;
        padding: 0;
        box-shadow: none !important;
        min-height: 0 !important;
    }}

    .chat-container:has(.user-message),
    .chat-container:has(.bot-message){{
        background: #F3F4F6 !important;
        border: 1.5px solid #9CA3AF !important;
        padding: 10px 14px;
        min-height: 0 !important;
    }}

    /* Hint just above the input */
    .prompt-hint{{
        width:75% !important;
        max-width: calc(var(--main-max) * 0.75) !important;
        margin: 4px auto 4px auto !important;
        text-align: left !important;
        color: {prompt_col};
        font-size:{prompt_sz}rem;
        font-weight:500;
    }}

    /* Chat input container ‚Äì support both selectors */
    .stChatInputContainer,
    [data-testid="stChatInput"]{{
        position: static !important;   /* avoid sticky push-down */
        width:75% !important;
        max-width: calc(var(--main-max) * 0.75) !important;
        margin: 6px auto 10px auto !important;
        box-sizing: border-box !important;
        opacity:1 !important;
        visibility:visible !important;
        pointer-events:auto !important;
    }}

    /* Outer wrapper of textarea */
    .stChatInputContainer [data-baseweb="textarea"],
    [data-testid="stChatInput"] [data-baseweb="textarea"]{{
        width: 100% !important;
        min-height: {input_h}px !important;
        background: var(--blue-100) !important;
        border: 1.5px solid var(--blue-300) !important;
        border-radius: 12px !important;
        box-shadow: none !important;
    }}

    /* Actual textarea */
    .stChatInputContainer [data-baseweb="textarea"] textarea,
    [data-testid="stChatInput"] [data-baseweb="textarea"] textarea{{
        min-height: {input_h}px !important;
        color: {input_text} !important;
        background: transparent !important;
        border: 0 !important;
        outline: none !important;
        box-shadow: none !important;
        border-radius: 12px !important;
        padding-top: .8rem !important;
        text-align: left !important;
    }}

    .stChatInputContainer [data-baseweb="textarea"] textarea::placeholder,
    [data-testid="stChatInput"] [data-baseweb="textarea"] textarea::placeholder{{
        color: #6B728099 !important;
    }}

    /* Responsive from YAML */
    @media (max-width:1200px){{
        .chat-container{{ max-width: {tablet_max}px; }}
    }}
    @media (max-width:900px){{
        .chat-container{{ width:{mobile_pct}%; max-width:none; }}
        .stChatInputContainer,
        [data-testid="stChatInput"]{{ width:{mobile_pct}% !important; max-width:none !important; }}
    }}
    </style>
    """,
        unsafe_allow_html=True,
    )

    st.markdown("""
    <style id="chat-input-final-override">
    /* B·∫ÆT BU·ªòC: kh√¥ng d√≠nh ƒë√°y */
    .stChatInputContainer,
    [data-testid="stChatInput"]{
        position: static !important;
        bottom: auto !important;
        top: auto !important;
        margin: 6px auto 10px auto !important;   /* s√°t hint */
        opacity: 1 !important;
        visibility: visible !important;
        pointer-events: auto !important;
    }

    /* Kh√¥ng ƒë·ªÉ khung l·ªãch s·ª≠ chi·∫øm ch·ªó khi r·ªóng */
    .chat-container{
        margin-bottom: 0 !important;
        min-height: 0 !important;
        padding-bottom: 0 !important;
    }

    /* Hint m·ªèng, s√°t input */
    .prompt-hint{ margin: 4px auto 4px auto !important; }
    </style>
    """, unsafe_allow_html=True)

    st.markdown("""
    <style id="final-y-compact">
    /* (1) Gi·∫£m padding d·ªçc m·∫∑c ƒë·ªãnh c·ªßa trang */
    .main .block-container{
        padding-top: 0.4rem !important;
        padding-bottom: 0.6rem !important;
    }

    /* (2) Ti√™u ƒë·ªÅ: ƒë·ª´ng ƒë·ªÉ kho·∫£ng c√°ch l·ªõn */
    h1{
        margin-bottom: 6px !important;
    }
    h1 + hr{ display:none !important; }  /* n·∫øu c√≤n <hr> d∆∞·ªõi H1 */

    /* (3) L·ªãch s·ª≠ chat: khi r·ªóng kh√¥ng chi·∫øm ch·ªó, khi c√≥ th√¨ padding nh·ªè */
    .chat-container{
        min-height: 0 !important;
        margin-bottom: 0 !important;
        padding-bottom: 0 !important;
    }
    .chat-container:has(.user-message),
    .chat-container:has(.bot-message){
        padding: 10px 14px !important;   /* gi·∫£m so v·ªõi m·∫∑c ƒë·ªãnh */
        margin-bottom: 6px !important;
    }

    /* (4) Hint: s√°t input */
    .prompt-hint{
        margin: 1px auto 1px auto !important;
    }

    /* (5) √î chat: KH√îNG sticky, k√©o s√°t l√™n tr√™n */
    .stChatInputContainer,
    [data-testid="stChatInput"]{
        position: static !important;
        bottom: auto !important;
        margin: 2px auto 8px auto !important;   /* ch·ªânh con s·ªë n√†y n·∫øu mu·ªën s√°t h∆°n/xa h∆°n */
        opacity: 1 !important; visibility: visible !important; pointer-events: auto !important;
    }

    /* (6) Uploader: ƒë·ª´ng ƒë·∫©y m·ªçi th·ª© ra xa */
    .element-container:has([data-testid="stFileUploader"]){
        margin-bottom: 2px !important;
    }
    </style>
    """, unsafe_allow_html=True)


    # === FINAL OVERRIDES: k√©o √¥ chat l√™n, ƒë·ªïi m√†u vi·ªÅn & ·∫©n drag-drop ===
    input_mt = getattr(theme, "INPUT_MARGIN_TOP_REM", -12)
    input_bg = getattr(theme, "INPUT_BG", "#F9FAFB")
    input_tx = getattr(theme, "INPUT_TEXT", "#111827")
    input_bd = getattr(theme, "INPUT_BORDER_DARK", "#9CA3AF")

    st.markdown(f"""
    <style id="chatgpt-like-overrides">
    /* 1) K√©o √¥ chat l√™n g·∫ßn gi·ªØa trang */
    .stChatInputContainer,
    [data-testid="stChatInput"]{{
    position: static !important;
    margin-top: {input_mt}rem !important;   /* ƒê·∫®Y L√äN */
    margin-bottom: 0.8rem !important;
    }}

    /* 2) ƒê·ªïi m√†u vi·ªÅn ƒë·ªè ‚Üí x√°m, n·ªÅn x√°m nh·∫°t, ch·∫∑n tr·∫°ng th√°i 'invalid' ƒë·ªè */
    .stChatInputContainer [data-baseweb="textarea"],
    [data-testid="stChatInput"] [data-baseweb="textarea"],
    .stChatInputContainer [data-baseweb="textarea"]:hover,
    [data-testid="stChatInput"] [data-baseweb="textarea"]:hover,
    .stChatInputContainer [data-baseweb="textarea"]:focus-within,
    [data-testid="stChatInput"] [data-baseweb="textarea"]:focus-within {{
    background: {input_bg} !important;
    border: 1.5px solid {input_bd} !important;
    border-radius: 999px !important;               /* h√¨nh vi√™n thu·ªëc gi·ªëng ChatGPT */
    box-shadow: none !important;
    }}

    .stChatInputContainer [data-baseweb="textarea"] textarea,
    [data-testid="stChatInput"] [data-baseweb="textarea"] textarea{{
    color: {input_tx} !important;
    background: transparent !important;
    border: 0 !important;
    outline: none !important;
    box-shadow: none !important;
    text-align: left !important;
    padding: .70rem 1.0rem !important;
    min-height: 44px !important;
    }}

    /* 3) ·∫®n v√πng drag & drop + d√≤ng ch·ªØ 'Drag and drop files here' + 'Limit ...' */
    [data-testid="stFileUploaderDropzone"],
    [data-testid="stFileUploadDropzone"],
    [data-testid="stFileUploader"] [data-testid="stFileUploaderDropzoneDescription"],
    [data-testid="stFileUploader"] [data-testid="stFileUploaderDetails"] {{
    display: none !important;   /* ch·ªâ gi·ªØ l·∫°i N√öT Browse files */
    }}

    /* 4) CƒÉn n√∫t Browse files sang ph·∫£i, g·ªçn nh∆∞ ChatGPT */
    .element-container:has([data-testid="stFileUploader"]) {{
    width: 75% !important;
    max-width: calc(var(--main-max, 820px) * 0.75) !important;
    margin: .25rem auto .5rem auto !important;
    display: flex; justify-content: flex-end;
    }}
    [data-testid="stFileUploader"] button {{
    border-radius: 10px !important;
    }}

    /* 5) Thu nh·ªè kho·∫£ng tr·∫Øng t·ªïng th·ªÉ ƒë·ªÉ input n·∫±m g·∫ßn trung t√¢m */
    .main .block-container {{
    padding-top: .4rem !important;
    padding-bottom: .6rem !important;
    }}
    </style>
    """, unsafe_allow_html=True)

    # ========== SIDEBAR ==========
    with st.sidebar:
        st.markdown(f"## üí¨ {title}")

        if "chat_sessions" not in st.session_state:
            st.session_state.chat_sessions = ["ƒêo·∫°n Chat 1"]
        if "chat_histories" not in st.session_state:
            st.session_state.chat_histories = {"ƒêo·∫°n Chat 1": []}
        if "current_chat" not in st.session_state:
            st.session_state.current_chat = "ƒêo·∫°n Chat 1"

        if st.button("‚ûï T·∫°o ƒëo·∫°n chat m·ªõi"):
            from datetime import datetime
            new_name = f"Chat_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            st.session_state.chat_sessions.append(new_name)
            st.session_state.current_chat = new_name
            st.session_state.chat_histories[new_name] = []
            save_chat(new_name, [])
            st.rerun()

        selected_chat = st.selectbox(
            "Ch·ªçn ƒëo·∫°n chat:",
            st.session_state.chat_sessions,
            index=len(st.session_state.chat_sessions) - 1
        )
        st.session_state.current_chat = selected_chat

        st.divider()

        show_debug_ui = os.getenv("SHOW_DEBUG_UI", "true").lower() == "true"
        if show_debug_ui:
            st.markdown("### üëÅÔ∏è Hi·ªÉn th·ªã c√°c ph·∫ßn")
            show_settings = st.checkbox("‚öôÔ∏è C√†i ƒë·∫∑t m√¥ h√¨nh", value=True)
            show_system   = st.checkbox("üìú System prompt", value=False)
            show_rag      = st.checkbox("üß† RAG diagnostics", value=False)
        else:
            show_settings = show_system = show_rag = False

        # Th√¥ng s·ªë m·∫∑c ƒë·ªãnh
        temperature = 0.3
        top_p = 1.0
        fallback_general = True
        K = 4
        MIN_RELEVANCE = 0.3
        debug_mode = False

    # ========== MAIN CHAT AREA ==========
    # Logo ƒë·ªông (optional)
    from pathlib import Path
    logo_path = Path("assets/robot_logo.mp4")
    if logo_path.exists():
        with open(logo_path, "rb") as f:
            logo_bytes = f.read()
        st.markdown('<div style="display:flex;justify-content:center;margin:.5rem 0 .5rem 0">', unsafe_allow_html=True)
        st.video(logo_bytes, start_time=0, loop=True)
        st.markdown("</div>", unsafe_allow_html=True)

    # Ti√™u ƒë·ªÅ

    st.markdown(f"""
    <div style='text-align:center; padding-top:.3rem;'>
        <h1 style='font-size:{title_sz}rem; font-weight:700; color:#111827; margin-bottom:.4rem;'>{title}</h1>
    </div>
    """, unsafe_allow_html=True)


    # L·ªãch s·ª≠ chat
    st.markdown('<div class="chat-container">', unsafe_allow_html=True)
    if st.session_state.current_chat not in st.session_state.chat_histories:
        st.session_state.chat_histories[st.session_state.current_chat] = []
    for role, msg in st.session_state.chat_histories[st.session_state.current_chat]:
        css = "user-message" if role == "user" else "bot-message"
        st.markdown(f'<div class="{css}">{msg}</div>', unsafe_allow_html=True)
    st.markdown("</div>", unsafe_allow_html=True)

    # Hint cƒÉn tr√°i
    st.markdown('<p class="prompt-hint">Enter your question here</p>', unsafe_allow_html=True)



    # Input + Uploader (Browse files ·ªü c·ªôt ph·∫£i)
    # √î chat ƒë·∫∑t ƒë·ªôc l·∫≠p ƒë·ªÉ CSS lu√¥n √°p d·ª•ng chu·∫©n
    user_msg = st.chat_input("")

    # Uploader ƒë·ªÉ ri√™ng b√™n d∆∞·ªõi (n·∫øu c·∫ßn ƒë·∫∑t c·∫°nh, ta s·∫Ω l√†m layout kh√°c sau)
    uploaded_files = st.file_uploader("üìé", accept_multiple_files=True, label_visibility="collapsed")


    if uploaded_files:
        for file in uploaded_files:
            st.session_state.chat_histories[st.session_state.current_chat].append(
                ("user", f"<div class='file-message'>üìÑ <b>{file.name}</b></div>")
            )

    # Footer t·ª´ YAML (hot reload)
    _cfg = _load_theme_yaml()
    _ft  = (_cfg.get("FOOTER") or {})

    return user_msg, temperature, top_p, fallback_general, K, MIN_RELEVANCE, debug_mode, show_system, show_rag
