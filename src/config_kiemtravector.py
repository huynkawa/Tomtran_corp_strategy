from langchain_chroma import Chroma
from src.config import make_embeddings
import os

VECTOR_DIR = os.getenv("VECTOR_DIR", "vector_store")
SUBDIR = r"cleaned_scan_data/uic_data"   # ch·ªânh ƒë√∫ng t√™n th∆∞ m·ª•c con b·∫°n ƒë√£ build

def test_queries(queries, k=2):
    vectordb = Chroma(
        persist_directory=os.path.join(VECTOR_DIR, SUBDIR),
        embedding_function=make_embeddings()
    )

    try:
        count = vectordb._collection.count()
        print(f"üìä T·ªïng s·ªë document trong vector store: {count}")
    except Exception as e:
        print("‚ö†Ô∏è Kh√¥ng ƒë·∫øm ƒë∆∞·ª£c s·ªë doc:", e)

    for q in queries:
        print(f"\nüîé Query: {q}")
        results = vectordb.similarity_search(q, k=k)
        if not results:
            print("‚ùå Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£.")
        else:
            for i, r in enumerate(results, 1):
                print(f"--- K·∫øt qu·∫£ {i} ---")
                print("Ngu·ªìn:", r.metadata.get("source"))
                print("N·ªôi dung:", r.page_content[:300])

if __name__ == "__main__":
    queries = [
        "doanh thu c·ªßa UIC",
        "n·ª£ ph·∫£i tr·∫£",
        "v·ªën ch·ªß s·ªü h·ªØu",
        "n·ª£ d√†i h·∫°n",
        "t√†i s·∫£n c·ªë ƒë·ªãnh",
        "d√≤ng ti·ªÅn cu·ªëi nƒÉm 2024"
    ]
    test_queries(queries, k=2)
