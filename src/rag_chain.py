# src/rag_chain.py
from src.reranker import rerank
import os
from openai import OpenAI
import time

# =========================
# === RETRIEVAL (gi·ªØ nguy√™n API)
# =========================
def retrieve_context_any(db_or_retriever, query, k=12, min_relev=0.2):
    """
    L·∫•y context t·ª´ vectordb ho·∫∑c retriever.
    Tr·∫£ v·ªÅ (ctx_text, docs, ok).
    """
    docs = []
    try:
        # ∆Øu ti√™n vectordb (Chroma)
        if hasattr(db_or_retriever, "similarity_search_with_relevance_scores"):
            pairs = db_or_retriever.similarity_search_with_relevance_scores(query, k=k)
            docs = [d for (d, s) in pairs if (s is not None and s >= min_relev)]
            if not docs:  # n·∫øu kh√¥ng ƒë·ªß ƒëi·ªÉm th√¨ l·∫•y t·∫•t c·∫£
                docs = [d for (d, _) in pairs]

        # N·∫øu kh√¥ng ph·∫£i vectordb, fallback sang retriever
        elif hasattr(db_or_retriever, "get_relevant_documents"):
            docs = db_or_retriever.get_relevant_documents(query)

    except Exception as e:
        print("[rag_chain] ‚ùå retrieve_context_any error:", e)
        docs = []

    ok = bool(docs)
    ctx_text = "\n\n".join(d.page_content for d in docs) if docs else ""
    return ctx_text, docs, ok


# =========================
# === ASSISTANTS HELPERS (m·ªõi)
# =========================
def _extract_assistant_text(client: OpenAI, thread_id: str) -> str:
    """
    L·∫•y to√†n b·ªô text t·ª´ c√°c message role=assistant trong thread (theo th·ª© t·ª± tƒÉng d·∫ßn),
    gh√©p l·∫°i th√†nh 1 chu·ªói. ∆Øu ti√™n blk.type == 'text'.
    """
    try:
        msgs = client.beta.threads.messages.list(thread_id=thread_id, order="asc")
    except Exception as e:
        return f"ERROR::messages_list::{e}"

    out = []
    for m in msgs.data:
        if getattr(m, "role", "") != "assistant":
            continue
        for blk in getattr(m, "content", []) or []:
            if getattr(blk, "type", None) == "text":
                txt = getattr(getattr(blk, "text", None), "value", "") or ""
                if txt:
                    out.append(txt)
    return "\n".join(out).strip() or "(Kh√¥ng c√≥ n·ªôi dung Assistant tr·∫£ v·ªÅ)"


def _run_assistant_safe(client: OpenAI, thread_id: str, assistant_id: str, timeout: int = 60) -> str:
    """
    T·∫°o run, poll an to√†n t·ªõi khi:
      - completed: tr·∫£ text
      - requires_action: tr·∫£ chu·ªói ƒë·∫∑c bi·ªát ƒë·ªÉ UI bi·∫øt ph·∫£i x·ª≠ l√Ω
      - failed/cancelled/expired: tr·∫£ ERROR::<code>::<message>
      - timeout: tr·∫£ l·ªói timeout
    """
    try:
        run = client.beta.threads.runs.create(thread_id=thread_id, assistant_id=assistant_id)
        print(f"[AssistantAPI] üöÄ Run created: {run.id} | Assistant: {assistant_id}")
    except Exception as e:
        return f"ERROR::run_create::{e}"

    start = time.time()
    while True:
        try:
            run_status = client.beta.threads.runs.retrieve(thread_id=thread_id, run_id=run.id)
        except Exception as e:
            return f"ERROR::run_retrieve::{e}"

        status = getattr(run_status, "status", "")
        if status in ("completed", "failed", "requires_action", "cancelled", "expired"):
            # k·∫øt th√∫c poll
            if status == "completed":
                return _extract_assistant_text(client, thread_id)

            if status == "requires_action":
                # B·∫°n ƒëang b·∫≠t tool (retrieval/code_interpreter/functions) m√† ch∆∞a submit tool_outputs.
                # Tr·∫£ v·ªÅ chu·ªói ƒë·∫∑c bi·ªát ƒë·ªÉ UI layer hi·ªÉn th·ªã r√µ.
                return "__REQUIRES_ACTION__"

            if status in ("failed", "cancelled", "expired"):
                # L·∫•y last_error v√† t√°ch code/message an to√†n (object ho·∫∑c dict ƒë·ªÅu OK)
                err = getattr(run_status, "last_error", None)

                if isinstance(err, dict):
                    code = err.get("code", status)
                    msg  = err.get("message", "Unknown")
                else:
                    # err c√≥ th·ªÉ l√† object ki·ªÉu LastError
                    code = getattr(err, "code", None) or status
                    # message c√≥ th·ªÉ ·ªü thu·ªôc t√≠nh .message ho·∫∑c args[0], fallback str(err)
                    msg  = getattr(err, "message", None)
                    if not msg and getattr(err, "args", None):
                        msg = err.args[0]
                    if not msg:
                        msg = str(err) if err is not None else "Unknown"
                print(f"[AssistantAPI] ‚ùå Run {status} | code={code} | msg={msg}")
                return f"ERROR::{code}::{msg}"


        if time.time() - start > timeout:
            return "ERROR::timeout::H·∫øt th·ªùi gian ch·ªù ph·∫£n h·ªìi t·ª´ Assistant"

        time.sleep(0.5)


# =========================
# === PUBLIC API (gi·ªØ nguy√™n t√™n)
# =========================
def rag_answer(query, retriever_or_db, client=None, use_fallback=True, threshold=0.2, k=12, debug=False):
    """
    Tr·∫£ l·ªùi c√¢u h·ªèi d·ª±a tr√™n t√†i li·ªáu (RAG) b·∫±ng Assistant API.
    Lu√¥n tr·∫£ v·ªÅ dict chu·∫©n:
      {
        "answer": str,
        "source": "internal" | "general" | "none",
        "ctx_text": str,
        "docs": list
      }
    """
    ctx_text, docs, ok = retrieve_context_any(retriever_or_db, query, k=k, min_relev=threshold)

    api_key = os.getenv("OPENAI_API_KEY")
    assistant_id = os.getenv("ASSISTANT_ID")
    if not assistant_id:
        return {
            "answer": "‚ùå Thi·∫øu ASSISTANT_ID trong .env.active",
            "source": "none",
            "ctx_text": ctx_text if ok else "",
            "docs": docs if ok else [],
        }

    client = client or OpenAI(api_key=api_key)

    # Reuse 1 thread cho session process (nh∆∞ b·∫£n c≈©)
    if not hasattr(rag_answer, "_thread") or rag_answer._thread is None:
        try:
            rag_answer._thread = client.beta.threads.create()
        except Exception as e:
            return {
                "answer": f"ERROR::thread_create::{e}",
                "source": "none",
                "ctx_text": ctx_text if ok else "",
                "docs": docs if ok else [],
            }

    # --- N·∫øu c√≥ context n·ªôi b·ªô ---
    if ok:
        # Rerank top-3 ƒë·ªÉ r√∫t g·ªçn context
        try:
            reranked = rerank(query, docs, top_n=3, return_scores=True)
            docs = [d for d, _ in reranked]
            ctx_text = "\n\n".join(d.page_content for d in docs)
            if debug:
                print(f"[rerank] Query: {query}")
                for d, score in reranked:
                    print(f"   - Score={score:.4f} | Source={d.metadata.get('source', 'unknown')}")
        except Exception as e:
            print("[rag_chain] ‚ö†Ô∏è rerank error:", e)
            # v·∫´n ti·∫øp t·ª•c v·ªõi ctx_text ban ƒë·∫ßu

        prompt = f"""
D·ªØ li·ªáu n·ªôi b·ªô (context):
{ctx_text}

C√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng:
{query}

H√£y tr·∫£ l·ªùi d·ª±a tr√™n d·ªØ li·ªáu n·ªôi b·ªô n·∫øu c√≥.
N·∫øu kh√¥ng c√≥, h√£y d√πng ki·∫øn th·ª©c chung (v√† n√™u r√µ ngu·ªìn).
""".strip()

        # ƒê·∫©y message v√†o thread
        try:
            client.beta.threads.messages.create(
                thread_id=rag_answer._thread.id,
                role="user",
                content=prompt
            )
        except Exception as e:
            return {
                "answer": f"ERROR::messages_create::{e}",
                "source": "internal",
                "ctx_text": ctx_text,
                "docs": docs,
            }

        # Ch·∫°y assistant v·ªõi poll an to√†n
        answer_text = _run_assistant_safe(client, rag_answer._thread.id, assistant_id)

        return {
            "answer": answer_text,
            "source": "internal",
            "ctx_text": ctx_text,
            "docs": docs,
        }

    # --- N·∫øu kh√¥ng c√≥ context v√† cho ph√©p fallback (ki·∫øn th·ª©c chung) ---
    if use_fallback:
        try:
            client.beta.threads.messages.create(
                thread_id=rag_answer._thread.id,
                role="user",
                content=query
            )
        except Exception as e:
            return {
                "answer": f"ERROR::messages_create::{e}",
                "source": "general",
                "ctx_text": "",
                "docs": [],
            }

        answer_text = _run_assistant_safe(client, rag_answer._thread.id, assistant_id)

        return {
            "answer": answer_text,
            "source": "general",
            "ctx_text": "",
            "docs": [],
        }

    # --- N·∫øu kh√¥ng c√≥ context v√† kh√¥ng fallback ---
    return {
        "answer": "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ph√π h·ª£p v√† kh√¥ng b·∫≠t fallback.",
        "source": "none",
        "ctx_text": "",
        "docs": [],
    }
