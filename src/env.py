import os
from pathlib import Path

print("=== DEBUG: B·∫Øt ƒë·∫ßu load OPENAI_API_KEY ===")

# ∆Øu ti√™n: l·∫•y key t·ª´ Streamlit Cloud (Secrets Manager)
try:
    import streamlit as st
    if "OPENAI_API_KEY" in st.secrets:
        os.environ["OPENAI_API_KEY"] = st.secrets["OPENAI_API_KEY"]
        print("‚úÖ DEBUG: Key loaded t·ª´ Streamlit secrets")
    else:
        print("‚ö†Ô∏è DEBUG: Streamlit secrets kh√¥ng c√≥ OPENAI_API_KEY")
except Exception as e:
    print("‚ö†Ô∏è DEBUG: Kh√¥ng ch·∫°y tr√™n Streamlit ho·∫∑c kh√¥ng import ƒë∆∞·ª£c:", e)

# N·∫øu ch∆∞a c√≥, load t·ª´ .env.active ho·∫∑c .env (√©p UTF-8 ƒë·ªÉ tr√°nh l·ªói Windows cp1258)
if "OPENAI_API_KEY" not in os.environ:
    from dotenv import dotenv_values, load_dotenv
    root_dir = Path(__file__).resolve().parent.parent

    env_active = root_dir / ".env.active"
    env_file = root_dir / ".env"

    if env_active.exists():
        values = dotenv_values(env_active, encoding="utf-8")
        for k, v in values.items():
            if v is not None:
                os.environ[k] = v
        print("‚úÖ DEBUG: Key loaded t·ª´ .env.active (UTF-8 forced)")
    elif env_file.exists():
        load_dotenv(env_file)
        print("‚úÖ DEBUG: Key loaded t·ª´ .env")
    else:
        print("‚ö†Ô∏è DEBUG: Kh√¥ng t√¨m th·∫•y .env.active ho·∫∑c .env")

# Ki·ªÉm tra key cu·ªëi c√πng
api_key = os.getenv("OPENAI_API_KEY")
if not api_key:
    print("‚ùå ERROR: OPENAI_API_KEY ch∆∞a ƒë∆∞·ª£c set. Vui l√≤ng c·∫•u h√¨nh trong .env ho·∫∑c Streamlit secrets.")
else:
    print("üîë DEBUG: OPENAI_API_KEY =", api_key[:10], "...(·∫©n ph·∫ßn c√≤n l·∫°i)")

print("=== DEBUG: K·∫øt th√∫c load OPENAI_API_KEY ===")
