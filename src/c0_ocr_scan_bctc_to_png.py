# -*- coding: utf-8 -*-
"""
src/c1_ocr_scan_to_png_bctc.py ‚Äî P1: Prelight OCR (deskew + crop margins + binarize)
Ch·∫°y tr∆∞·ªõc khi OCR ch√≠nh ƒë·ªÉ t·∫°o ·∫£nh s·∫°ch cho b∆∞·ªõc sau.

- H·ªó tr·ª£ PDF & ·∫£nh (PNG/JPG/TIF)
- Render PDF ·ªü DPI m·∫∑c ƒë·ªãnh 500
- ∆Ø·ªõc l∆∞·ª£ng & s·ª≠a nghi√™ng (HoughLinesP) n·∫øu |g√≥c| > 0.3¬∞
- C·∫Øt l·ªÅ tr·∫Øng, ch·ª´a padding
- Binarize nh·∫π (adaptive) gi·ªØ ƒë∆∞·ªùng k·∫ª m·∫£nh
- Xu·∫•t "mirror" c·∫•u tr√∫c th∆∞ m·ª•c, m·ªói trang 2 file:
    *_orig.png  (x√°m, ƒë√£ deskew + crop)
    *_bin.png   (binarize)
"""

from __future__ import annotations
import os, glob, argparse
from typing import Optional, Tuple, List
import numpy as np
import cv2
import shutil   # [ADD]
APPEND_MODE = False  # [ADD] d√πng ƒë·ªÉ bi·∫øt c√≥ ƒëang ch·∫°y ch·∫ø ƒë·ªô append-only kh√¥ng


# pdf2image
try:
    from pdf2image import convert_from_path
except Exception:
    convert_from_path = None

# ========= ƒê∆Ø·ªúNG D·∫™N M·∫∂C ƒê·ªäNH (Windows) =========
DEFAULT_IN  = r"D:\1.TLAT\3. ChatBot_project\1_Insurance_Strategy\inputs\c_scan_inputs_test"
DEFAULT_OUT = r"D:\1.TLAT\3. ChatBot_project\1_Insurance_Strategy\outputs\outputs0\c0_ocr_scan_bctc_to_png"
POPPLER_PATH = os.environ.get("POPPLER_PATH", None)  # set n·∫øu c·∫ßn

# ========= TI·ªÜN √çCH =========
def ensure_dir(p: str) -> None:
    os.makedirs(p, exist_ok=True)

def rel_out_dir(in_root: str, out_root: str, file_path: str) -> str:
    rel = os.path.relpath(os.path.dirname(file_path), in_root)
    return out_root if rel == "." else os.path.join(out_root, rel)

def imwrite_ok(path: str, img) -> None:
    ensure_dir(os.path.dirname(path))
    ok = cv2.imwrite(path, img)
    if not ok:
        raise RuntimeError(f"Kh√¥ng ghi ƒë∆∞·ª£c ·∫£nh: {path}")

def is_pdf(path: str) -> bool:
    return os.path.splitext(path)[1].lower() == ".pdf"

def is_image(path: str) -> bool:
    return os.path.splitext(path)[1].lower() in [".png", ".jpg", ".jpeg", ".tif", ".tiff"]

# ========= CORE: ∆Ø·ªöC L∆Ø·ª¢NG NGHI√äNG / CROP / BINARIZE =========
def estimate_skew_angle(gray: np.ndarray) -> float:
    edges = cv2.Canny(gray, 50, 150, apertureSize=3)
    lines = cv2.HoughLinesP(edges, 1, np.pi/180, threshold=160,
                            minLineLength=max(gray.shape)//10, maxLineGap=20)
    if lines is None:
        return 0.0
    angles = []
    for l in lines:
        x1, y1, x2, y2 = l[0]
        ang = np.degrees(np.arctan2(y2 - y1, x2 - x1))
        while ang >= 90: ang -= 180
        while ang <  -90: ang += 180
        angles.append(ang)
    if not angles:
        return 0.0
    a = np.array(angles)
    near_h = a[np.abs(a) <= 30]
    near_v = a[(np.abs(np.abs(a) - 90) <= 30)]
    if len(near_h) >= len(near_v):
        return float(np.median(near_h)) if len(near_h) else 0.0
    deltas = []
    for v in near_v:
        deltas.append(v - 90 if v > 0 else v + 90)
    return float(np.median(deltas)) if deltas else 0.0

def rotate_bound(img: np.ndarray, angle_deg: float) -> np.ndarray:
    (h, w) = img.shape[:2]
    c = (w//2, h//2)
    M = cv2.getRotationMatrix2D(c, angle_deg, 1.0)
    cos, sin = abs(M[0,0]), abs(M[0,1])
    nW = int((h*sin) + (w*cos)); nH = int((h*cos) + (w*sin))
    M[0,2] += (nW/2) - c[0]; M[1,2] += (nH/2) - c[1]
    return cv2.warpAffine(img, M, (nW, nH), flags=cv2.INTER_CUBIC, borderValue=(255,255,255))

def crop_margins(gray: np.ndarray, pad: int=16) -> Tuple[np.ndarray, Tuple[int,int,int,int]]:
    thr = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY+cv2.THRESH_OTSU)[1]
    inv = 255 - thr
    ys, xs = np.where(inv > 0)
    if len(xs) == 0 or len(ys) == 0:
        return gray, (0,0,gray.shape[1], gray.shape[0])
    x0, x1 = xs.min(), xs.max()
    y0, y1 = ys.min(), ys.max()
    x0 = max(0, x0 - pad); y0 = max(0, y0 - pad)
    x1 = min(gray.shape[1]-1, x1 + pad)
    y1 = min(gray.shape[0]-1, y1 + pad)
    return gray[y0:y1+1, x0:x1+1], (x0,y0,x1-x0+1,y1-y0+1)

def gentle_binarize(gray: np.ndarray) -> np.ndarray:
    blur = cv2.medianBlur(gray, 3)
    return cv2.adaptiveThreshold(blur, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C,
                                 cv2.THRESH_BINARY, 31, 15)

# ========= X·ª¨ L√ù ·∫¢NH / PDF =========
def process_image(in_root: str, out_root: str, img_path: str, base: str, page_no: int) -> None:
    out_dir = rel_out_dir(in_root, out_root, img_path)
    ensure_dir(out_dir)

    data = np.fromfile(img_path, dtype=np.uint8)
    im = cv2.imdecode(data, cv2.IMREAD_COLOR)
    if im is None:
        print(f"‚ö†Ô∏è B·ªè qua (kh√¥ng ƒë·ªçc ƒë∆∞·ª£c): {img_path}")
        return

    gray = cv2.cvtColor(im, cv2.COLOR_BGR2GRAY)

    angle = estimate_skew_angle(gray)
    if abs(angle) > 0.3:
        im = rotate_bound(im, -angle)
        gray = cv2.cvtColor(im, cv2.COLOR_BGR2GRAY)

    # ·∫£nh x√°m ƒë√£ crop (d√πng cho _orig.png)
    cropped, _ = crop_margins(gray, pad=16)
    # ·∫£nh nh·ªã ph√¢n (d√πng cho _bin.png)
    bin_img = gentle_binarize(cropped)

    suf = f"{base}_page{page_no:02d}"
    p_orig = os.path.join(out_dir, f"{suf}_orig.png")
    p_bin  = os.path.join(out_dir, f"{suf}_bin.png")

    # ===== ghi file v·ªõi ch·∫ø ƒë·ªô append-only =====
    # n·∫øu APPEND_MODE=True v√† file ƒë√£ t·ªìn t·∫°i ‚Üí b·ªè qua, ng∆∞·ª£c l·∫°i ghi b√¨nh th∆∞·ªùng
    if APPEND_MODE and os.path.exists(p_orig):
        print(f"‚Ü©Ô∏è B·ªè qua (ƒë√£ c√≥): {os.path.relpath(p_orig, out_root)}")
    else:
        imwrite_ok(p_orig, cv2.cvtColor(cropped, cv2.COLOR_GRAY2BGR))

    if APPEND_MODE and os.path.exists(p_bin):
        print(f"‚Ü©Ô∏è B·ªè qua (ƒë√£ c√≥): {os.path.relpath(p_bin, out_root)}")
    else:
        imwrite_ok(p_bin,  cv2.cvtColor(bin_img, cv2.COLOR_GRAY2BGR))

    print(f"üñºÔ∏è Saved: {os.path.relpath(p_orig, out_root)}, {os.path.relpath(p_bin, out_root)}  (skew={angle:.2f}¬∞)")


def process_pdf(in_root: str, out_root: str, pdf_path: str, dpi: int, start: int, end: Optional[int]) -> None:
    if convert_from_path is None:
        raise RuntimeError("Thi·∫øu pdf2image. pip install pdf2image v√† thi·∫øt l·∫≠p POPPLER_PATH n·∫øu c·∫ßn.")
    kwargs = dict(dpi=dpi, first_page=start, last_page=end)
    if POPPLER_PATH: kwargs["poppler_path"] = POPPLER_PATH
    try:
        pages = convert_from_path(pdf_path, **kwargs)
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói render PDF '{pdf_path}': {e}"); return
    base = os.path.splitext(os.path.basename(pdf_path))[0]
    out_dir = rel_out_dir(in_root, out_root, pdf_path)
    ensure_dir(out_dir)
    for i, pil in enumerate(pages, start=start):
        img = cv2.cvtColor(np.array(pil), cv2.COLOR_RGB2BGR)
        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        angle = estimate_skew_angle(gray)
        if abs(angle) > 0.3:
            img = rotate_bound(img, -angle); gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        cropped, _ = crop_margins(gray, pad=16)
        bin_img = gentle_binarize(cropped)
        suf = f"{base}_page{i:02d}"
        p_orig = os.path.join(out_dir, f"{suf}_orig.png")
        p_bin  = os.path.join(out_dir, f"{suf}_bin.png")
        imwrite_ok(p_orig, cv2.cvtColor(cropped, cv2.COLOR_GRAY2BGR))
        imwrite_ok(p_bin,  cv2.cvtColor(bin_img, cv2.COLOR_GRAY2BGR))
        print(f"üñºÔ∏è Saved: {os.path.relpath(p_orig, out_root)}, {os.path.relpath(p_bin, out_root)}  (skew={angle:.2f}¬∞)")

def walk_and_process(in_root: str, out_root: str, dpi: int, start: int, end: Optional[int]) -> None:
    pdfs = glob.glob(os.path.join(in_root, "**", "*.pdf"), recursive=True)
    imgs: List[str] = []
    for pat in ("*.png", "*.jpg", "*.jpeg", "*.tif", "*.tiff"):
        imgs.extend(glob.glob(os.path.join(in_root, "**", pat), recursive=True))
    if not pdfs and not imgs:
        print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y PDF/·∫¢nh n√†o trong input."); return
    for p in pdfs:
        print(f"\nüìÇ PDF: {p}"); process_pdf(in_root, out_root, p, dpi, start, end)
    for p in imgs:
        print(f"\nüñºÔ∏è ·∫¢nh: {p}"); base = os.path.splitext(os.path.basename(p))[0]
        process_image(in_root, out_root, p, base, page_no=1)

# ========= CLI =========
def build_argparser() -> argparse.ArgumentParser:
    p = argparse.ArgumentParser("P1 Prelight OCR (deskew + crop + binarize)")
    p.add_argument("--in",   dest="in_dir",  default=DEFAULT_IN,
                   help="Th∆∞ m·ª•c input (recursive) ch·ª©a PDF/·∫£nh")
    p.add_argument("--out",  dest="out_dir", default=DEFAULT_OUT,
                   help="Th∆∞ m·ª•c output mirror")
    p.add_argument("--dpi", type=int, default=500, help="DPI render PDF")
    p.add_argument("--start", type=int, default=1, help="Trang b·∫Øt ƒë·∫ßu (PDF)")
    p.add_argument("--end",   type=int, default=None, help="Trang k·∫øt th√∫c (PDF) (inclusive)")

    # [ADD] h·ªèi/xo√°/append/b·ªè qua khi output ƒë√£ t·ªìn t·∫°i
    p.add_argument("--clean", choices=["ask","y","a","n"], default="ask",
                help="ask: h·ªèi; y: xo√° output c≈©; a: gi·ªØ th∆∞ m·ª•c & ch·ªâ ghi file m·ªõi; n: b·ªè qua n·∫øu ƒë√£ t·ªìn t·∫°i")
    return p


def main():
    global APPEND_MODE  # ph·∫£i ƒë·ª©ng TR∆Ø·ªöC m·ªçi ph√©p g√°n APPEND_MODE trong h√†m

    args = build_argparser().parse_args()

    # Chu·∫©n b·ªã output theo --clean
    out_root = args.out_dir
    if os.path.exists(out_root):
        choice = args.clean
        if choice == "ask":
            choice = input(f"‚ö†Ô∏è Output '{out_root}' ƒë√£ t·ªìn t·∫°i. y=xo√°, a=append, n=b·ªè qua: ").strip().lower()
        if choice == "y":
            shutil.rmtree(out_root, ignore_errors=True); print(f"üóëÔ∏è ƒê√£ xo√° {out_root}")
        elif choice == "n":
            print("‚è≠Ô∏è B·ªè qua P1 (prelight)."); return
        elif choice == "a":
            print(f"‚ûï Gi·ªØ {out_root}, ch·ªâ ghi file m·ªõi.")
        else:
            print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá ‚Üí b·ªè qua."); return

    ensure_dir(out_root)

    # B·∫¨T c·ªù append sau khi ƒë√£ khai b√°o global
    APPEND_MODE = (args.clean == "a")

    print(f"Input : {args.in_dir}")
    print(f"Output: {args.out_dir}")
    print(f"DPI   : {args.dpi}")
    if POPPLER_PATH: print(f"POPPLER_PATH: {POPPLER_PATH}")

    walk_and_process(args.in_dir, args.out_dir, args.dpi, args.start, args.end)
    print("\n‚úÖ Ho√†n t·∫•t P1 Prelight OCR. D√πng *_bin.png cho b∆∞·ªõc OCR ti·∫øp theo.")



if __name__ == "__main__":
    main()
